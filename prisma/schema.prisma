// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String?           @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  participations ClubParticipant[]
  Club           Club[]
  Donations      Donation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Club {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())

  description String
  image       String

  creator_id String
  creator    User   @relation(fields: [creator_id], references: [id])

  participats ClubParticipant[]
  Donations   Donation[]
  Events      Event[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  display_name    String
  ClubParticipant ClubParticipant[]
}

model ClubParticipant {
  user_id String
  club_id Int

  club Club @relation(fields: [club_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  role_id Int
  role    Role @relation(fields: [role_id], references: [id])

  @@id([user_id, club_id])
}

model Donation {
  id Int @id @default(autoincrement())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  club_id Int
  club    Club @relation(fields: [club_id], references: [id])

  amount Float

  status DonationStatus @default(PENDING)

  created_at DateTime @default(now())
}

enum DonationStatus {
  SUCCESS
  FAILURE
  PENDING
}

model Event {
  id Int @id @default(autoincrement())

  images   String[]
  location String

  club_id Int
  club    Club @relation(fields: [club_id], references: [id])

  start_at DateTime
  end_at   DateTime

  created_at DateTime @default(now())
}

model Post {
  id      Int      @id @default(autoincrement())
  title   String
  images  String[]
  Caption String

  created_at DateTime @default(now())
}
